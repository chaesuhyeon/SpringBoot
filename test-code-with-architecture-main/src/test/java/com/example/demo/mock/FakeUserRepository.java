package com.example.demo.mock;

import com.example.demo.common.domain.exception.ResourceNotFoundException;
import com.example.demo.user.domain.User;
import com.example.demo.user.domain.UserStatus;
import com.example.demo.user.service.port.UserRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0); // 초기값을 0으로 설정하며, 고유한 id를 자동으로 생성할 때 사용된다. --> auto_increment와 같은 역할
    private final List<User> data = Collections.synchronizedList(new ArrayList<>()); // 혹시 모를 병렬 처리에 대비해서 synchronizedList 사용 --> 소형 테스트는 단일 스레드에서 돌아가기 때문에 동기화를 걱정해줄 필요 없어서 그냥 ArrayList 사용해도 됨

    @Override
    public User getById(long id) {
        return findById(id).orElseThrow(()-> new ResourceNotFoundException("User", id));
    }

    @Override
    public Optional<User> findById(long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        return data.stream().filter(item -> item.getId().equals(id) && item.getStatus() == userStatus).findAny();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream().filter(item -> item.getEmail().equals(email) && item.getStatus() == userStatus).findAny();
    }

    @Override
    public User save(User user) {
        if(user.getId() == null || user.getId() == 0) { // id가 없으면 새로운 데이터로 판단 -> insert
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet()) // id를 자동 증가값으로 설정
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .address(user.getAddress())
                    .certificationCode(user.getCertificationCode())
                    .status(user.getStatus())
                    .lastLoginAt(user.getLastLoginAt())
                    .build();
            data.add(newUser);
            return newUser;
        } else { // id가 있으면 기존 데이터로 판단 -> update
            data.removeIf(item -> Objects.equals(item.getId(), user.getId())); // 해당 id를 가진 데이터를 삭제
            data.add(user); // 새로운 데이터로 다시 저장
            return user;
        }
    }
}
